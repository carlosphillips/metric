{"version":3,"sources":["metric-stuff/computeFunctionAnalyser.js","metric-stuff/computeFunctionHelpers.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,qC;AACA,yC;AACA,uC;;AAEA,6B;AACA,+E;AACA,M;AACA,oE;AACA,c;AACA,0G;AACA,E;;AAEA,qB;AACA,c;AACA,a;AACA,G;;AAEA,2B;AACA,yE;AACA,+B;AACA,qC;;AAEA,0B;AACA,oB;AACA,uE;AACA,gD;;AAEA,iC;AACA,wB;AACA,uE;AACA,gD;AACA,I;AACA,G;AACA,I;;AAEA,qB;AACA,C;;;;;;;;;;;;;;;;;;ACpCA,4B;AACA,oD","file":"/packages/metric-stuff.js","sourcesContent":["var esprima = Npm.require('esprima');\nvar escodegen = Npm.require('escodegen');\nvar walk = Npm.require('esprima-walk');\n\nComputeFunctionAnalyser = {};\nComputeFunctionAnalyser.getDependencies = function(computeFunctionCodeString) {\n\ttry {\n\t\tvar ast = esprima.parse(computeFunctionCodeString, { raw: true });\n\t} catch(ex) {\n\t\tthrow new Meteor.Error(\"parsing-error\", \"Your code has syntax errors: \" + ex.toString(), ex.toString());\n\t}\n\n\tvar dependencies = {\n\t\tmetrics: [],\n\t\trecords: []\n\t};\n\n\twalk(ast, function(node) {\n\t\tif(node.type == 'CallExpression' && node.callee.type == \"Identifier\") {\n\t\t\tvar name = node.callee.name;\n\t\t\t// 0th argument is always the path\n\n\t\t\tif(name == 'Metrics') {\n\t\t\t\t// Metrics(path)\n\t\t\t\tvar dependencyString = eval(escodegen.generate(node.arguments[0]));\n\t\t\t\tdependencies.metrics.push(dependencyString);\n\n\t\t\t} else if(name == 'Records') {\n\t\t\t\t// Records(category)\n\t\t\t\tvar dependencyString = eval(escodegen.generate(node.arguments[0]));\n\t\t\t\tdependencies.records.push(dependencyString);\n\t\t\t}\n\t\t}\n\t});\n\n\treturn dependencies;\n}","ComputeFunctionHelpers = {};\nComputeFunctionHelpers.gauss = Npm.require('gauss');"]}